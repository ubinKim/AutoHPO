"""
Create a set of heatmaps with a 2 x 3 grid layout.
Each heatmap displays the training and validation accuracy for a pair of hyperparameters.

The data used to generate the heatmaps is loaded from CSV file.

Returns:
-------
a 2D array of matplotlib.axes._subplots.AxesSubplot
    The heatmap displaying the training and validation accuracy for a pair of hyperparameters

    x-axis, y-axis: a pair of hyperparameters (lr/dropout/hidden_unit) \n
    cell value: corresponding accuracy (1st row: training / 2nd row: validation) \n

Usage:
-------
The resulting set of heatmaps can be used to: \n
- Identify the hyperparameter pairs that lead to the highest accuracy on the training and validation sets.
- Compare the performance of different hyperparameter combinations.

"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import itertools

result_file = pd.read_csv('../results/grid_results_80.csv')
df = pd.DataFrame(result_file)

hyperparams = ['lr', 'dropout', 'hidden_unit']
accuracy = ['tr_acc', 'val_acc']

fig, axs = plt.subplots(len(accuracy), len(hyperparams), figsize=(12, 8))
hp_pairs = list(itertools.combinations(hyperparams, 2)) # all possible pair of hyperparameters

for i, acc in enumerate(accuracy):
    for j, hp in enumerate(hp_pairs):
        # Preprocessing: create pivot tables without duplicates
        highest_val_acc = result_file.groupby(list(hp))[acc].max().reset_index()
        pivot_table = highest_val_acc.pivot(index=hp[0], columns=hp[1], values=acc)
        pivot_table = pivot_table.iloc[::-1]  # Reverse the order of rows
        sns.heatmap(pivot_table, linewidths=.2, annot=True, fmt='.4f', ax=axs[i, j],
                    cmap='plasma')  # Display up to 4 decimal places
        axs[i, j].set_title(f"{acc}")
        axs[i, j].set_xlabel(hp[1])
        axs[i, j].set_ylabel(hp[0])

plt.subplots_adjust(hspace=0.3)
plt.show()
